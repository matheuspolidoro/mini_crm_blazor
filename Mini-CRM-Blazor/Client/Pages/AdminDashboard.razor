@page "/in/admin"

@using Microsoft.AspNetCore.Authorization
@using Mini_CRM_Blazor.Client.Shared
@using Mini_CRM_Blazor.Shared.Models
@using MudBlazor

@layout AuthLayout
@inherits MainLayout

@attribute [Authorize(Roles = "Admin")]
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject CustomStateProvider authStateProvider
@inject NavigationManager navigationManager

<MudAppBar Color="Color.Primary" Fixed="false">
    <MudText> MiniCRM </MudText>
    <MudSpacer />
    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
        <MudMenuItem @onclick="LogoutClick">Logout</MudMenuItem>
    </MudMenu>
</MudAppBar>
<MudContainer Class="d-flex flex-column pv-16" MaxWidth="MaxWidth.False" Style=@($"background: {Colors.Indigo.Lighten5}; height: 100vh; padding-top: 64px;")>
    <MudButton Class="mb-4" Style="width: fit-content; align-self: self-end;" Variant="Variant.Filled" Color="Color.Primary" @onclick="OpenDialog">
        Add subscription
    </MudButton>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<CompanySubscriberDto>>>(GetCompanies))"
              Dense="true" Hover="true" @ref="table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Customers</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="CompanyName" T="CompanySubscriberDto">Company name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="TradingName" T="CompanySubscriberDto">Trading name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="AreaOfBusiness" T="CompanySubscriberDto">Area of business</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="TradingName">@context.CompanyName</MudTd>
                <MudTd DataLabel="TradingName">@context.TradingName</MudTd>
                <MudTd DataLabel="AreaOfBusiness">@context.AreaOfBusiness</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>

    @code {
    private IEnumerable<CompanySubscriberDto> pagedData;
    private MudTable<CompanySubscriberDto> table;
    private int totalItems;
    private string searchString = null;

    private async void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<AddCompanyDialog>("Add new subscription", options);

        var result = await dialog.Result;
        if (result.Data != null)
            await table.ReloadServerData();
    }

    public async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/");
    }

    private async Task<TableData<CompanySubscriberDto>> GetCompanies(TableState state)
    {
        IEnumerable<CompanySubscriberDto> data = await httpClient.GetFromJsonAsync<List<CompanySubscriberDto>>("api/CompanySubscribers/GetAll");
        //IEnumerable<CompanySubscriberDto> data = CompanySubscriberList;
        await Task.Delay(1300);

        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.TradingName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.AreaOfBusiness.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();

        totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "TradingName":
                data = data.OrderByDirection(state.SortDirection, o => o.TradingName);
                break;
            case "AreaOfBusiness":
                data = data.OrderByDirection(state.SortDirection, o => o.AreaOfBusiness);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<CompanySubscriberDto>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    public List<CompanySubscriberDto> CompanySubscriberList { get; set; } = new List<CompanySubscriberDto>
    {
        new CompanySubscriberDto
        {
            Id = Guid.NewGuid(),
            CompanyName = "Xpto Corporation, Inc.",
            TradingName = "Xpto",
            Website = "www.xpto.com",
            AreaOfBusiness = "Technology",
            Description = "A good description here",
        },
        new CompanySubscriberDto
        {
            Id = Guid.NewGuid(),
            CompanyName = "Orange Computer, Inc..",
            TradingName = "Orange",
            Website = "www.orange.com",
            AreaOfBusiness = "Technology",
            Description = "A good description here"
        },
    };

}
