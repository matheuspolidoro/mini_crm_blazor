@page "/"

@using Mini_CRM_Blazor.Client.Shared
@using MudBlazor

@inject CustomStateProvider authStateProvider
@inject NavigationManager navigationManager

<MudPaper MinHeight="100vh"
          Width="100%"
          Class="pa-16 d-flex flex-column align-items-center"
          Style=@($"gap: 16px; background: {Colors.Indigo.Lighten5}")
          Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudCard Elevation="0" Class="rounded-sm my-4">
            <MudCardMedia Image="images/mini_crm_logo_crop.png" Height="200" />
            <MudCardContent>
                @if (_isSignInMode)
                {
                    <UserSignInComponent />
                }
                else
                {
                    <UserSignUpComponent />
                }
            </MudCardContent>
            <MudDivider />
            <MudCardActions>
                @if (_isSignInMode)
                {
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               DisableElevation="true"
                               @onclick="SwitchCustomerSignInSignUp">
                        Create an account
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               DisableElevation="true"
                               @onclick="SwitchCustomerSignInSignUp">
                        I already have an account
                    </MudButton>
                }
            </MudCardActions>
        </MudCard>
    </MudContainer>
</MudPaper>

@code {
    bool _drawerOpen = false;
    bool _isCustomerLogInForm = false;
    bool _isSignInMode = true;

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationState;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/in");
        }
    }

    private void SwitchCustomerSignInSignUp()
    {
        _isSignInMode = !_isSignInMode;
    }
}