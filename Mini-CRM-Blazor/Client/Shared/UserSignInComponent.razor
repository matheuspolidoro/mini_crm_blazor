@using Microsoft.AspNetCore.Components.Forms
@using Mini_CRM_Blazor.Shared.Models
@using MudBlazor
@using System.ComponentModel.DataAnnotations

@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<EditForm OnValidSubmit="OnSubmit" Model="loginRequest">
    <DataAnnotationsValidator />
    <MudCard Elevation="0">
        <MudCardContent>
            <MudTextField Label="Email"
                          Class="mt-3"
                          @bind-Value="loginRequest.Email"
                          For="@(() => loginRequest.Email)" />
            @*<ValidationMessage For="@(() => loginRequest.UserName)" />*@
            <MudTextField Label="Password"
                          HelperText="Example123!"
                          @bind-Value="loginRequest.Password"
                          For="@(() => loginRequest.Password)"
                          InputType="InputType.Password" />
            @* <ValidationMessage For="@(() => loginRequest.Password)" />*@
        </MudCardContent>
        <MudCardActions>
            <div class="form-check m-3">
                <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="loginRequest.RememberMe" />
                <label class="form-check-label" for="inputRememberMe">Remember Me</label>
            </div>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       DisableElevation="true"
                       Class="ml-auto"
                       Disabled="_processing">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Log in</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
    <label class="text-danger">@error</label>
</EditForm>

@code {
    public LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }
    private bool _processing = false;
    bool success;

    async Task OnSubmit()
    {
        _processing = true;
        error = null;
        try
        {
            await authStateProvider.Login(loginRequest);
            navigationManager.NavigateTo("/in");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            _processing = false;
        }
    }
}